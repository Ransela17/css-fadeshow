/*
 * Name:			CSS Fadeshow (css-fadeshow)
 * Description: 	Easy to use fadeshow built in CSS only
 * Github URL:		https://github.com/alexerlandsson/css-fadeshow
 * Author:			Alexander Erlandsson (@alexerlandsson)
 * Author URL:		https://alexerlandsson.com
 */


/*
 * ===== VARIABLES =====
 *
 * Change these variables to match your preferences. For a more detailed
 * description of what each variable do, visit https://github.com/alexerlandsson/css-fadeshow
 */

$max-images:				5;
$prefix:					true;
$responsive:				true;
$breakpoint-small:			500px;
$fade-time:					1000ms;
$prev-next-fontfamily: 		sans-serif;
$prev-next-icon-size:		3vw;
$prev-next-icon-color:		rgba(255,255,255,0.5);
$prev-next-bg:				rgba(255,255,255,0);
$prev-next-bg-hover:		rgba(255,255,255,0.1);
$prev-icon:					'❮';
$next-icon:					'❯';
$autohide-next-prev:		true;
$dot-color:					rgba(255,255,255,0.8);
$dot-active-color:			coral;
$fade-color:				#fff;


/*
 * ===== MIXINS =====
 *
 * This section contains mixin used
 * Do not change anything here unless you know what you are doing.
 */

/* Mixins to handle prefixes */

@mixin fadeshow-transition($value...) {
	@if length($value) < 1 {
		$value: all 150ms linear;
	}
	@if $prefix == true {
		-webkit-transition: $value;
	}
				transition: $value;
}

@mixin fadeshow-transform($value...) {
	@if length($value) < 1 {
		$value: all 150ms linear;
	}
	@if $prefix == true {
		-webkit-transform: $value;
			-ms-transform: $value;
	}
				transform: $value;
}

@mixin fadeshow-unselectable() {
	@if $prefix == true {
		-webkit-user-select: none;
		   -moz-user-select: none;
			-ms-user-select: none;
	}
				user-select: none;
}


/*
 * ===== FADESHOW =====
 *
 * Base functionality for the fadeshow.
 * Do not change anything here unless you know what you are doing.
 */

[data-am-fadeshow] {
	position: relative;
	width: 100%;
	height: 100%;
	overflow: hidden;
	background-color: $fade-color;

	.image {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		opacity: 0;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		@include fadeshow-transition(opacity $fade-time ease);
	}

	input[type="radio"] {
		position: fixed;
		top: -9999px;
		&:checked {
			/* This loop handles the image switching and dot active state */
			$i: $max-images;
			@while $i > 0 {
				&:nth-of-type(#{$i}) {
					//Show image
					~ .images {
						.image:nth-child(#{$i}) {
							opacity: 1;
						}
					}
					//Add active state to dot
					~ .navigation {
						.dot:nth-child(#{$i}) {
							background-color: $dot-active-color;
							&:hover {
								opacity: 1;
							}
						}
					}
				}
			  $i: $i - 1;
			}
			//Hide navigation if only one image
			&:first-of-type:last-of-type {
				~ .navigation,
				~ .prev-container,
				~ .next-container {
					display: none !important;
				}
			}
		}
	}

	/* Dot Navigation */

	.navigation {
		position: absolute;
		bottom: 15px;
		left: 50%;
		z-index: 1;
		@include fadeshow-unselectable();
		@include fadeshow-transform(translateX(-50%));
	}

	.dot {
		display: inline-block;
		width: 15px;
		height: 15px;
		margin: 0 2px;
		border-radius: 50%;
		background-color: $dot-color;
		cursor: pointer;
		@include fadeshow-transition(opacity 200ms ease);
		&:hover {
			opacity: 0.8;
		}
	}

	/* Prev/Next Navigation */

	%prev-next {
		position: absolute;
		display: none;
		top: 0;
		bottom: 0;
		width: 100px;
		cursor: pointer;
		font-family: $prev-next-fontfamily;
		background-color: $prev-next-bg;
		@include fadeshow-transition(all 200ms ease);
		@if $responsive == true {
			@media (max-width: $breakpoint-small) {
				width: 50%;
			}
		}
		&:before {
			position: absolute;
			top: 50%;
			font-size: $prev-next-icon-size;
			color: $prev-next-icon-color;
		}
		&:hover {
			background-color: $prev-next-bg-hover;
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					background-color: rgba(255,255,255,0);
				}
			}

		}
	}

	.prev {
		@extend %prev-next;
		left: 0;
		&:before {
			content: "#{$prev-icon}";
			left: 50%;
			@include fadeshow-transform(translate(-50%, -50%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					left: 30px;
				}
			}
		}
		@if $autohide-next-prev == true {
			@include fadeshow-transform(translateX(-100%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					@include fadeshow-transform(translate(0));
				}
			}
		}
	}

	.next {
		@extend %prev-next;
		right: 0;
		&:before {
			content: "#{$next-icon}";
			right: 50%;
			@include fadeshow-transform(translate(50%, -50%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					right: 30px;
				}
			}
		}
		@if $autohide-next-prev == true {
			@include fadeshow-transform(translateX(100%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					@include fadeshow-transform(translate(0));
				}
			}
		}
	}

	/* Autohide Prev/Next */

	@if $autohide-next-prev == true {
		&:hover {
			.prev,
			.next {
				@include fadeshow-transform(translateX(0));
			}
		}
	}

}

/* Handle Prev/Next buttons */

[data-am-fadeshow~="next-prev-navigation"] {
	input[type="radio"] {
		&:checked {
			$i: $max-images;
			@while $i > 0 {
				&:nth-of-type(#{$i}) {
					$prev: ($i - 1);
					$next: ($i + 1);
					//Show previous button
					@if $prev > 0 {
						~ .prev-container {
							.prev:nth-child(#{$prev}) {
								display: block;
							}
						}
					}
					//Show next button
					@if $next < ($max-images + 1) {
						~ .next-container {
						.next:nth-child(#{$next}) {
							display: block;
						}
						}
					}
					//Show last prev button if first image
					&:first-of-type {
						~ .prev-container {
							.prev:last-child {
								display: block;
							}
						}
					}
					//Show first next button if last image
					&:last-of-type {
						~ .next-container {
							.next:first-child {
								display: block;
							}
						}
					}
				}
			  $i: $i - 1;
			}
		}
	}
}
