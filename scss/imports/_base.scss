/*
 * ===== BASE =====
 *
 * This file handles the base functionality.
 * It also include the main loop which is used by some of the modifiers as well.
 */

[data-am-fadeshow] {
	position: relative;
	overflow: hidden;
	background-color: $fs-fade-color;

	/* Slides */
	.fs-slide {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		opacity: 0;
		@include fs-mixin-transition(opacity #{$fs-fade-time}s linear);
		/* Display first child on load */
		&:first-child {
			opacity: 1;
		}
	}

	/* Slide functionality */
	input[type="radio"] {
		position: fixed;
		top: -9999px;
		visibility: hidden;
		&:checked {
			/* Main loop */
			@for $i from 1 through $fs-max-slides {
				&:nth-of-type(#{$i}) {
					/* Show slide */
					~ .fs-slides {
						.fs-slide {
							opacity: 0;
							@if $fs-include-autoplay == true {
								/* Cancel autoplay */
								@include fadeshow-animation(none !important);
							}
						}
						.fs-slide:nth-child(#{$i}) {
							opacity: 1;
						}
					}
					/* Prev/Next Navigation */
					@if $fs-include-prevnextnav == true {
						$prev: ($i - 1);
						$next: ($i + 1);

						/* Show previous button */
						@if $prev > 0 {
							~ .fs-prev-nav {
								.fs-prev-btn {
									display: none;
								}
								.fs-prev-btn:nth-child(#{$prev}) {
									display: block;
								}
							}
						}
						/* Show next button */
						@if $next < ($fs-max-slides + 1) {
							~ .fs-next-nav {
								.fs-next-btn {
									display: none;
								}
								.fs-next-btn:nth-child(#{$next}) {
									display: block;
								}
							}
						}
						/* Show last prev button if first slide */
						&:first-of-type {
							~ .fs-prev-nav {
								.fs-prev-btn {
									display: none;
								}
								.fs-prev-btn:last-child {
									display: block;
								}
							}
						}
						/* Show first next button if last slide */
						&:last-of-type {
							~ .fs-next-nav {
								.fs-next-btn {
									display: none;
								}
								.fs-next-btn:first-child {
									display: block;
								}
							}
						}
					}
					/* Quick Navigation */
					@if $fs-include-quicknav == true {
						~ .fs-quick-nav {
							.fs-quick-btn {
								@include quickNavBtnInactive();
								@if $fs-include-autoplay == true {
									/* Cancel autoplay */
									@include fadeshow-animation(none !important);
								}
							}
							.fs-quick-btn:nth-child(#{$i}) {
								//TODO: How to handle active button styling?
								@include quickNavBtnActive();
								&:hover {
									opacity: 1;
								}
							}
						}
					}
					/* Slide Counter */
					@if $fs-include-slidecounter == true {
						~ .fs-slide-counter {
							.fs-slide-counter-current {
								&:before {
									content: "#{$i}";
								}
							}
						}
					}
				}
			}
			/* Hide navigation if only one slide */
			&:first-of-type:last-of-type {
				@if $fs-include-prevnextnav != true {
					~ .fs-prev-nav,
					~ .fs-next-nav {
						display: none !important;
					}
				}
				@if $fs-include-quicknav != true {
					~ .fs-quick-nav {
						display: none !important;
					}
				}
				@if $fs-include-slidecounter != true {
					~ .fs-slide-counter {
						display: none !important;
					}
				}
			}
		}
	}

	/* Hide modifiers if set to false */
	@if $fs-include-prevnextnav != true {
		.fs-prev-nav,
		.fs-next-nav {
			display: none !important;
		}
	}
	@if $fs-include-quicknav != true {
		.fs-quick-nav {
			display: none !important;
		}
	}
	@if $fs-include-slidecounter != true {
		.fs-slide-counter {
			display: none !important;
		}
	}
}
